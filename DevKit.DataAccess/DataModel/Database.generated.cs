//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Linq;

using LinqToDB;
using LinqToDB.Mapping;

namespace DataModel
{
	/// <summary>
	/// Database       : DevKit
	/// Data Source    : localhost
	/// Server Version : 9.6.1
	/// </summary>
	public partial class DevKitDB : LinqToDB.Data.DataConnection
	{
		public ITable<Profile>      Profiles      { get { return this.GetTable<Profile>(); } }
		public ITable<Project>      Projects      { get { return this.GetTable<Project>(); } }
		public ITable<ProjectPhase> ProjectPhases { get { return this.GetTable<ProjectPhase>(); } }
		public ITable<ProjectUser>  ProjectUsers  { get { return this.GetTable<ProjectUser>(); } }
		public ITable<Setup>        Setups        { get { return this.GetTable<Setup>(); } }
		public ITable<User>         Users         { get { return this.GetTable<User>(); } }
		public ITable<UserEmail>    UserEmails    { get { return this.GetTable<UserEmail>(); } }
		public ITable<UserPhone>    UserPhones    { get { return this.GetTable<UserPhone>(); } }

		public DevKitDB()
		{
		}

		public DevKitDB(string configuration)
			: base(configuration)
		{
		}
	}

	[Table(Schema="public", Name="Profile")]
	public partial class Profile
	{
		[PrimaryKey, Identity] public long   id            { get; set; } // bigint
		[Column,     Nullable] public string stName        { get; set; } // character varying(200)
		[Column,     Nullable] public string stPermissions { get; set; } // character varying(9999)
	}

	[Table(Schema="public", Name="Project")]
	public partial class Project
	{
		[PrimaryKey, Identity] public long      id         { get; set; } // bigint
		[Column,     Nullable] public string    stName     { get; set; } // character varying(99)
		[Column,     Nullable] public long?     fkUser     { get; set; } // bigint
		[Column,     Nullable] public DateTime? dtCreation { get; set; } // timestamp (6) without time zone
	}

	[Table(Schema="public", Name="ProjectPhase")]
	public partial class ProjectPhase
	{
		[PrimaryKey, Identity] public long      id        { get; set; } // bigint
		[Column,     Nullable] public long?     fkProject { get; set; } // bigint
		[Column,     Nullable] public string    stName    { get; set; } // character varying(99)
		[Column,     Nullable] public DateTime? dtStart   { get; set; } // timestamp (6) without time zone
		[Column,     Nullable] public DateTime? dtEnd     { get; set; } // timestamp (6) without time zone
		[Column,     Nullable] public bool?     bComplete { get; set; } // boolean
	}

	[Table(Schema="public", Name="ProjectUser")]
	public partial class ProjectUser
	{
		[PrimaryKey, Identity] public long      id        { get; set; } // bigint
		[Column,     Nullable] public long?     fkProject { get; set; } // bigint
		[Column,     Nullable] public long?     fkUser    { get; set; } // bigint
		[Column,     Nullable] public string    stRole    { get; set; } // character varying(99)
		[Column,     Nullable] public DateTime? dtJoin    { get; set; } // timestamp (6) without time zone
	}

	[Table(Schema="public", Name="Setup")]
	public partial class Setup
	{
		[PrimaryKey, Identity] public long   id           { get; set; } // bigint
		[Column,     Nullable] public string stPhoneMask  { get; set; } // character varying(99)
		[Column,     Nullable] public string stDateFormat { get; set; } // character varying(99)
	}

	[Table(Schema="public", Name="User")]
	public partial class User
	{
		[PrimaryKey, Identity] public long      id          { get; set; } // bigint
		[Column,     Nullable] public string    stLogin     { get; set; } // character varying(200)
		[Column,     Nullable] public string    stPassword  { get; set; } // character varying(30)
		[Column,     Nullable] public bool?     bActive     { get; set; } // boolean
		[Column,     Nullable] public long?     fkProfile   { get; set; } // bigint
		[Column,     Nullable] public DateTime? dtLastLogin { get; set; } // timestamp (6) without time zone
		[Column,     Nullable] public DateTime? dtCreation  { get; set; } // timestamp (6) without time zone
	}

	[Table(Schema="public", Name="UserEmail")]
	public partial class UserEmail
	{
		[PrimaryKey, Identity] public long   id      { get; set; } // bigint
		[Column,     Nullable] public long?  fkUser  { get; set; } // bigint
		[Column,     Nullable] public string stEmail { get; set; } // character varying(250)
	}

	[Table(Schema="public", Name="UserPhone")]
	public partial class UserPhone
	{
		[PrimaryKey, Identity] public long   id            { get; set; } // bigint
		[Column,     Nullable] public long?  fkUser        { get; set; } // bigint
		[Column,     Nullable] public string stPhone       { get; set; } // character varying(50)
		[Column,     Nullable] public string stDescription { get; set; } // character varying(50)
	}

	public static partial class tableExtensions
	{
		public static Profile Find(this ITable<Profile> table, long id)
		{
			return table.FirstOrDefault(t =>
				t.id == id);
		}

		public static Project Find(this ITable<Project> table, long id)
		{
			return table.FirstOrDefault(t =>
				t.id == id);
		}

		public static ProjectPhase Find(this ITable<ProjectPhase> table, long id)
		{
			return table.FirstOrDefault(t =>
				t.id == id);
		}

		public static ProjectUser Find(this ITable<ProjectUser> table, long id)
		{
			return table.FirstOrDefault(t =>
				t.id == id);
		}

		public static Setup Find(this ITable<Setup> table, long id)
		{
			return table.FirstOrDefault(t =>
				t.id == id);
		}

		public static User Find(this ITable<User> table, long id)
		{
			return table.FirstOrDefault(t =>
				t.id == id);
		}

		public static UserEmail Find(this ITable<UserEmail> table, long id)
		{
			return table.FirstOrDefault(t =>
				t.id == id);
		}

		public static UserPhone Find(this ITable<UserPhone> table, long id)
		{
			return table.FirstOrDefault(t =>
				t.id == id);
		}
	}
}
